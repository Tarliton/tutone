{{- $packageName := .PackageName -}}
package {{$packageName}}

{{- if gt (len .Imports) 0 }}
import (
  {{- range .Imports}}
  {{.}}
  {{- end}}
)
{{- end}}

{{range .Commands}}
{{- $cmdNameTitleCase := .Name | title -}}
{{- $cmdVarName := print "cmd" $cmdNameTitleCase -}}

var {{$cmdVarName}} = &cobra.Command{
	Use: {{.Name | quote}},
	Short: {{.ShortDescription | quote}},
  Long: {{.LongDescription | quote}},
  Example: "newrelic {{$packageName}} {{.Name}} --help",
}

{{range .Subcommands}}
{{- $nameTitleCase := .Name | title -}}
{{- $cmdVarName := print "cmd" $nameTitleCase -}}

{{range .Flags}}
  var {{.VariableName}} {{.VariableType}}
{{- end}}

var {{$cmdVarName}} = &cobra.Command{
  Use: {{.Name | quote}},
  Short: {{.ShortDescription | quote}},
  Long: {{.LongDescription | quote}},
  Example: {{.Example | quote}},
  Run: func(cmd *cobra.Command, args []string) {
    client.WithClient(func(nrClient *newrelic.NewRelic) {
      {{- range .Flags }}
      {{- if .IsInputType }}
      var {{.Name}} {{.ClientType}}
			err := json.Unmarshal([]byte({{.VariableName}}), &{{.Name}})
			utils.LogIfFatal(err)
      {{- end -}}
      {{end}}

      resp, err := {{.ClientMethod}}({{.ClientMethodArgs | join ", "}})
			utils.LogIfFatal(err)

			utils.LogIfFatal(output.Print(resp))
    })
  },
}
{{- end}}
{{- end}}

func init() {
{{ range .Commands }}
{{- $parentCmdNameTitleCase := .Name | title -}}
{{- $parentCmdVarName := print "cmd" $parentCmdNameTitleCase -}}
  Command.AddCommand({{$parentCmdVarName}})

{{ range .Subcommands}}
{{- $subCmdNameTitleCase := .Name | title -}}
{{- $cmdVarName := print "cmd" $subCmdNameTitleCase -}}

  {{$parentCmdVarName}}.AddCommand({{$cmdVarName}})

{{ range .Flags}}
  {{- $defaultVal := .DefaultValue | quote -}}
  {{- if (eq .Type "int") -}}
    {{- $defaultVal = 0 -}}
  {{- end}}

  {{$cmdVarName}}.Flags().{{- .FlagMethodName -}}(&{{.VariableName}}, {{.Name | quote}}, {{$defaultVal}}, {{.Description | quote}})
  {{- if .Required}}
  utils.LogIfError({{- $cmdVarName -}}.MarkFlagRequired({{.Name | quote}}))
  {{end}}
{{- end}}
{{- end}}
{{- end}}
}
